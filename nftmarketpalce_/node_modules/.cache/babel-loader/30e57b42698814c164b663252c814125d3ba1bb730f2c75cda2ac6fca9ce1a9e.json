{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch } from \"react-redux\";\nimport { setNFTs, setListedNFTs } from \"../Store/slicers/accounts\";\nimport { useSelector } from \"react-redux\";\nimport { Network, initializeAlchemy, getNftsForOwner } from \"@alch/alchemy-sdk\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS } from \"./../Contract/Constant/Info\";\nimport { ABI } from \"./../Contract/Constant/Info\";\nexport const useGetNFTs = () => {\n  _s();\n  const settings = {\n    apiKey: \"9X6vuVC3c691tpYe86ISQw80IdGsr5Gp\",\n    network: Network.ETH_GOERLI,\n    maxRetries: 10\n  };\n  const alchemy = initializeAlchemy(settings);\n  const dispatch = useDispatch();\n  const account = useSelector(state => state.accounts.account);\n  const listedNFTs = useSelector(state => state.accounts.listedNFTs);\n  const getNFTs = async () => {\n    if (account) {\n      const nftsForOwner = await getNftsForOwner(alchemy, account);\n      dispatch(setNFTs(nftsForOwner));\n    }\n  };\n  const getListedNFTs = async () => {\n    if (account) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);\n      const num = await contract.idForSale();\n      if (num == 0) {\n        return;\n      }\n      let array = [];\n      for (var i = 0; i < num; i++) {\n        let info = await contract.idToItemForSale(i);\n        if (!info.state) {\n          let newItem = {\n            0: info.contractAddress,\n            1: info.tokenId.toNumber(),\n            2: info.price.toNumber(),\n            3: i\n          };\n          array.push(newItem);\n        }\n      }\n      dispatch(setListedNFTs(array));\n    }\n  };\n  return {\n    getNFTs,\n    getListedNFTs\n  };\n};\n_s(useGetNFTs, \"zJsO7+H6aaV/iF/qhdDSWzuPeVo=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});","map":{"version":3,"names":["useDispatch","setNFTs","setListedNFTs","useSelector","Network","initializeAlchemy","getNftsForOwner","ethers","CONTRACT_ADDRESS","ABI","useGetNFTs","settings","apiKey","network","ETH_GOERLI","maxRetries","alchemy","dispatch","account","state","accounts","listedNFTs","getNFTs","nftsForOwner","getListedNFTs","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","num","idForSale","array","i","info","idToItemForSale","newItem","contractAddress","tokenId","toNumber","price","push"],"sources":["/Users/mehmetkelnebioglu/Desktop/nftmarketpalce_/src/Hooks/useGetNFTs.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { setNFTs, setListedNFTs } from \"../Store/slicers/accounts\";\nimport { useSelector } from \"react-redux\";\nimport { Network, initializeAlchemy, getNftsForOwner } from \"@alch/alchemy-sdk\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS } from \"./../Contract/Constant/Info\";\nimport { ABI } from \"./../Contract/Constant/Info\";\n\nexport const useGetNFTs = () => {\n  const settings = {\n    apiKey: \"9X6vuVC3c691tpYe86ISQw80IdGsr5Gp\",\n    network: Network.ETH_GOERLI,\n    maxRetries: 10,\n  };\n\n  const alchemy = initializeAlchemy(settings);\n  const dispatch = useDispatch();\n  const account = useSelector((state) => state.accounts.account);\n  const listedNFTs = useSelector((state) => state.accounts.listedNFTs);\n\n  const getNFTs = async () => {\n    if (account) {\n      const nftsForOwner = await getNftsForOwner(alchemy, account);\n      dispatch(setNFTs(nftsForOwner));\n    }\n  };\n\n  const getListedNFTs = async () => {\n    if (account) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);\n      const num = await contract.idForSale();\n      if (num == 0) {\n        return;\n      }\n      let array = [];\n      for (var i = 0; i < num; i++) {\n        let info = await contract.idToItemForSale(i);\n        if (!info.state) {\n          let newItem = {\n            0: info.contractAddress,\n            1: info.tokenId.toNumber(),\n            2: info.price.toNumber(),\n            3: i\n          };\n          array.push(newItem);\n        }\n      }\n      dispatch(setListedNFTs(array));\n    }\n  };\n\n  return {\n    getNFTs,\n    getListedNFTs,\n  };\n};\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,OAAO,EAAEC,aAAa,QAAQ,2BAA2B;AAClE,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,OAAO,EAAEC,iBAAiB,EAAEC,eAAe,QAAQ,mBAAmB;AAC/E,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,GAAG,QAAQ,6BAA6B;AAEjD,OAAO,MAAMC,UAAU,GAAG,MAAM;EAAA;EAC9B,MAAMC,QAAQ,GAAG;IACfC,MAAM,EAAE,kCAAkC;IAC1CC,OAAO,EAAET,OAAO,CAACU,UAAU;IAC3BC,UAAU,EAAE;EACd,CAAC;EAED,MAAMC,OAAO,GAAGX,iBAAiB,CAACM,QAAQ,CAAC;EAC3C,MAAMM,QAAQ,GAAGjB,WAAW,EAAE;EAC9B,MAAMkB,OAAO,GAAGf,WAAW,CAAEgB,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAACF,OAAO,CAAC;EAC9D,MAAMG,UAAU,GAAGlB,WAAW,CAAEgB,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAACC,UAAU,CAAC;EAEpE,MAAMC,OAAO,GAAG,YAAY;IAC1B,IAAIJ,OAAO,EAAE;MACX,MAAMK,YAAY,GAAG,MAAMjB,eAAe,CAACU,OAAO,EAAEE,OAAO,CAAC;MAC5DD,QAAQ,CAAChB,OAAO,CAACsB,YAAY,CAAC,CAAC;IACjC;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,YAAY;IAChC,IAAIN,OAAO,EAAE;MACX,MAAMO,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAS,EAAE;MACnC,MAAMC,QAAQ,GAAG,IAAIzB,MAAM,CAAC0B,QAAQ,CAACzB,gBAAgB,EAAEC,GAAG,EAAEqB,MAAM,CAAC;MACnE,MAAMI,GAAG,GAAG,MAAMF,QAAQ,CAACG,SAAS,EAAE;MACtC,IAAID,GAAG,IAAI,CAAC,EAAE;QACZ;MACF;MACA,IAAIE,KAAK,GAAG,EAAE;MACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,EAAEG,CAAC,EAAE,EAAE;QAC5B,IAAIC,IAAI,GAAG,MAAMN,QAAQ,CAACO,eAAe,CAACF,CAAC,CAAC;QAC5C,IAAI,CAACC,IAAI,CAACnB,KAAK,EAAE;UACf,IAAIqB,OAAO,GAAG;YACZ,CAAC,EAAEF,IAAI,CAACG,eAAe;YACvB,CAAC,EAAEH,IAAI,CAACI,OAAO,CAACC,QAAQ,EAAE;YAC1B,CAAC,EAAEL,IAAI,CAACM,KAAK,CAACD,QAAQ,EAAE;YACxB,CAAC,EAAEN;UACL,CAAC;UACDD,KAAK,CAACS,IAAI,CAACL,OAAO,CAAC;QACrB;MACF;MACAvB,QAAQ,CAACf,aAAa,CAACkC,KAAK,CAAC,CAAC;IAChC;EACF,CAAC;EAED,OAAO;IACLd,OAAO;IACPE;EACF,CAAC;AACH,CAAC;AAAC,GAjDWd,UAAU;EAAA,QAQJV,WAAW,EACZG,WAAW,EACRA,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}