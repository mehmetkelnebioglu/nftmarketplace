{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch } from \"react-redux\";\nimport { setAccount } from \"../Store/slicers/accounts\";\nexport const useSetAccount = () => {\n  _s();\n  const dispatch = useDispatch();\n  const connectAccount = async () => {\n    if (!window.ethereum) {\n      throw Error(\"User has to download metamask\");\n    } else {\n      let accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      }).catch(err => {\n        console.log(err.code);\n      });\n      dispatch(setAccount(accounts[0]));\n      if (window.ethereum.chainId === \"0x4\") {\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        }).catch(err => {\n          console.log(err.code);\n        });\n      } else {\n        try {\n          await window.ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{\n              chainId: \"0x4\"\n            }]\n          });\n        } catch (e) {\n          if (e.code === 4902) {\n            try {\n              await window.ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [{\n                  chainId: \"0x4\",\n                  chainName: \"Rinkeby Test Network\",\n                  nativeCurrency: {\n                    name: \"Ether\",\n                    symbol: \"ETH\",\n                    // 2-6 characters long\n                    decimals: 18\n                  },\n                  blockExplorerUrls: [\"https://rinkeby.etherscan.io/\"],\n                  rpcUrls: [\"https://rinkeby.infura.io/v3/\"]\n                }]\n              });\n            } catch (addError) {\n              console.error(addError);\n            }\n          }\n        }\n      }\n    }\n  };\n  return {\n    connectAccount\n  };\n};\n_s(useSetAccount, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["useDispatch","setAccount","useSetAccount","dispatch","connectAccount","window","ethereum","Error","accounts","request","method","catch","err","console","log","code","chainId","params","e","chainName","nativeCurrency","name","symbol","decimals","blockExplorerUrls","rpcUrls","addError","error"],"sources":["/Users/mehmetkelnebioglu/Desktop/untitled folder/src/Hooks/useSetAccount.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { setAccount } from \"../Store/slicers/accounts\";\n\nexport const useSetAccount = () => {\n  const dispatch = useDispatch();\n\n  const connectAccount = async () => {\n    if (!window.ethereum) {\n      throw Error(\"User has to download metamask\");\n    } else {\n      let accounts = await window.ethereum\n        .request({ method: \"eth_requestAccounts\" })\n        .catch((err) => {\n          console.log(err.code);\n        });\n      dispatch(setAccount(accounts[0]));\n\n      if (window.ethereum.chainId === \"0x4\") {\n        await window.ethereum\n          .request({ method: \"eth_requestAccounts\" })\n          .catch((err) => {\n            console.log(err.code);\n          });\n      } else {\n        try {\n          await window.ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: \"0x4\" }],\n          });\n        } catch (e) {\n          if (e.code === 4902) {\n            try {\n              await window.ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [\n                  {\n                    chainId: \"0x4\",\n                    chainName: \"Rinkeby Test Network\",\n                    nativeCurrency: {\n                      name: \"Ether\",\n                      symbol: \"ETH\", // 2-6 characters long\n                      decimals: 18,\n                    },\n                    blockExplorerUrls: [\"https://rinkeby.etherscan.io/\"],\n                    rpcUrls: [\"https://rinkeby.infura.io/v3/\"],\n                  },\n                ],\n              });\n            } catch (addError) {\n              console.error(addError);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  return {\n    connectAccount,\n  };\n};\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,QAAQ,2BAA2B;AAEtD,OAAO,MAAMC,aAAa,GAAG,MAAM;EAAA;EACjC,MAAMC,QAAQ,GAAGH,WAAW,EAAE;EAE9B,MAAMI,cAAc,GAAG,YAAY;IACjC,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;MACpB,MAAMC,KAAK,CAAC,+BAA+B,CAAC;IAC9C,CAAC,MAAM;MACL,IAAIC,QAAQ,GAAG,MAAMH,MAAM,CAACC,QAAQ,CACjCG,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC,CAC1CC,KAAK,CAAEC,GAAG,IAAK;QACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAAC;MACvB,CAAC,CAAC;MACJZ,QAAQ,CAACF,UAAU,CAACO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MAEjC,IAAIH,MAAM,CAACC,QAAQ,CAACU,OAAO,KAAK,KAAK,EAAE;QACrC,MAAMX,MAAM,CAACC,QAAQ,CAClBG,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC,CAC1CC,KAAK,CAAEC,GAAG,IAAK;UACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAAC;QACvB,CAAC,CAAC;MACN,CAAC,MAAM;QACL,IAAI;UACF,MAAMV,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;YAC5BC,MAAM,EAAE,4BAA4B;YACpCO,MAAM,EAAE,CAAC;cAAED,OAAO,EAAE;YAAM,CAAC;UAC7B,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOE,CAAC,EAAE;UACV,IAAIA,CAAC,CAACH,IAAI,KAAK,IAAI,EAAE;YACnB,IAAI;cACF,MAAMV,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;gBAC5BC,MAAM,EAAE,yBAAyB;gBACjCO,MAAM,EAAE,CACN;kBACED,OAAO,EAAE,KAAK;kBACdG,SAAS,EAAE,sBAAsB;kBACjCC,cAAc,EAAE;oBACdC,IAAI,EAAE,OAAO;oBACbC,MAAM,EAAE,KAAK;oBAAE;oBACfC,QAAQ,EAAE;kBACZ,CAAC;kBACDC,iBAAiB,EAAE,CAAC,+BAA+B,CAAC;kBACpDC,OAAO,EAAE,CAAC,+BAA+B;gBAC3C,CAAC;cAEL,CAAC,CAAC;YACJ,CAAC,CAAC,OAAOC,QAAQ,EAAE;cACjBb,OAAO,CAACc,KAAK,CAACD,QAAQ,CAAC;YACzB;UACF;QACF;MACF;IACF;EACF,CAAC;EAED,OAAO;IACLtB;EACF,CAAC;AACH,CAAC;AAAC,GAzDWF,aAAa;EAAA,QACPF,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}